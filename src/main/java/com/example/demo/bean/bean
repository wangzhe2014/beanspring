现在开始初始化容器
这是BeanFactoryPostProcessor实现类构造器！！
BeanFactoryPostProcessor调用postProcessBeanFactory方法
这是BeanPostProcessor实现类构造器！！

这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法

InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改bean:com.example.demo.bean.Student@6ec8211c beanName:student
BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！bean:com.example.demo.bean.Student@6ec8211c beanName:student

InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法



InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
【构造器】注入属性上海
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
【注入属性】注入属性address
【注入属性】注入属性name
【注入属性】注入属性phone
【BeanNameAware接口】调用BeanNameAware.setBeanName():person
【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory():org.springframework.beans.factory.support.DefaultListableBeanFactory@7e0b0338: defining beans [beanPostProcessor,instantiationAwareBeanPostProcessor,beanFactoryPostProcessor,student,person]; root of factory hierarchy
Person [address=广州, name=张三, phone=1222]

BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改bean:Person [address=广州, name=张三, phone=1222] beanName:person
【InitializingBean接口】调用InitializingBean.afterPropertiesSet()
【init-method】调用<bean>的init-method属性指定的初始化方法
BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！bean:Person [address=广州, name=张三, phone=1222] beanName:person

InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
容器初始化成功
<<<=====Person [address=广州, name=张三, phone=1222]
<<<==========================>>>
现在开始关闭容器！
【DiposibleBean接口】调用DiposibleBean.destory()
【destroy-method】调用<bean>的destroy-method属性指定的初始化方法
